set show timing off .
set random seed 0 .

// #qubit: 5, marked state: 00011, #iterations: 4
prog GROVER is
var q0, q1, q2, q3, q4 : qubit;
prop
	target := P(q0, |1>) and P(q1, |1>) and P(q2, |0>) and P(q3, |0>) and P(q4, |0>);
begin
	atomic {
	// initialize superposition qubits
	q0 := H[q0];
	q1 := H[q1];
	q2 := H[q2];
	q3 := H[q3];
	q4 := H[q4];
	// oracle
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q4 := H[q4];
	q0, q1, q2, q3, q4 := MCX[q0, q1, q2, q3, q4];
	q4 := H[q4];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	// diffusion
	q0 := H[q0];
	q1 := H[q1];
	q2 := H[q2];
	q3 := H[q3];
	q4 := H[q4];
	q0 := X[q0];
	q1 := X[q1];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q4 := H[q4];
	q0, q1, q2, q3, q4 := MCX[q0, q1, q2, q3, q4];
	q4 := H[q4];
	q0 := X[q0];
	q1 := X[q1];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q0 := H[q0];
	q1 := H[q1];
	q2 := H[q2];
	q3 := H[q3];
	q4 := H[q4];
	// oracle
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q4 := H[q4];
	q0, q1, q2, q3, q4 := MCX[q0, q1, q2, q3, q4];
	q4 := H[q4];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	// diffusion
	q0 := H[q0];
	q1 := H[q1];
	q2 := H[q2];
	q3 := H[q3];
	q4 := H[q4];
	q0 := X[q0];
	q1 := X[q1];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q4 := H[q4];
	q0, q1, q2, q3, q4 := MCX[q0, q1, q2, q3, q4];
	q4 := H[q4];
	q0 := X[q0];
	q1 := X[q1];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q0 := H[q0];
	q1 := H[q1];
	q2 := H[q2];
	q3 := H[q3];
	q4 := H[q4];
	// oracle
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q4 := H[q4];
	q0, q1, q2, q3, q4 := MCX[q0, q1, q2, q3, q4];
	q4 := H[q4];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	// diffusion
	q0 := H[q0];
	q1 := H[q1];
	q2 := H[q2];
	q3 := H[q3];
	q4 := H[q4];
	q0 := X[q0];
	q1 := X[q1];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q4 := H[q4];
	q0, q1, q2, q3, q4 := MCX[q0, q1, q2, q3, q4];
	q4 := H[q4];
	q0 := X[q0];
	q1 := X[q1];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q0 := H[q0];
	q1 := H[q1];
	q2 := H[q2];
	q3 := H[q3];
	q4 := H[q4];
	// oracle
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q4 := H[q4];
	q0, q1, q2, q3, q4 := MCX[q0, q1, q2, q3, q4];
	q4 := H[q4];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	// diffusion
	q0 := H[q0];
	q1 := H[q1];
	q2 := H[q2];
	q3 := H[q3];
	q4 := H[q4];
	q0 := X[q0];
	q1 := X[q1];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q4 := H[q4];
	q0, q1, q2, q3, q4 := MCX[q0, q1, q2, q3, q4];
	q4 := H[q4];
	q0 := X[q0];
	q1 := X[q1];
	q2 := X[q2];
	q3 := X[q3];
	q4 := X[q4];
	q0 := H[q0];
	q1 := H[q1];
	q2 := H[q2];
	q3 := H[q3];
	q4 := H[q4];
	};
	// measure all qubits
	if M[q0] = 1 then skip; else skip; fi;
	if M[q1] = 1 then skip; else skip; fi;
	if M[q2] = 1 then skip; else skip; fi;
	if M[q3] = 1 then skip; else skip; fi;
	if M[q4] = 1 then skip; else skip; fi;
end

pcheck in GROVER with 'P=? [F "target"]' --backend=Storm .

search in GROVER with =>! such that P(q0, |1>) and P(q1, |1>) and P(q2, |0>) and P(q3, |0>) and P(q4, |0>) .

psearch in GROVER with =>! such that P(q0, |1>) and P(q1, |1>) and P(q2, |0>) and P(q3, |0>) and P(q4, |0>) .

quit .