prog NETWORK_CODING is
var
	q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13 : qubit;
init
	q0 := |0>;
	q1 := |0>;
	q2 := |0>;
	q3 := |0>;
	q4 := |0>;
	q5 := |0>;
	q6 := |0>;
	q7 := |0>;
	q8 := |0>;
	q9 := |0>;
	q10 := |0>;
	q11 := |0>;
	q12 := |0>;
	q13 := |0>;
prop
	target := P(q1, q4, |phi+>) and P(q0, q5, |phi+>);
begin
	q0 := H[q0];
	q0, q1 := CX[q0, q1];
	q2 := H[q2];
	q2, q3 := CX[q2, q3];
	q4 := H[q4];
	q4, q5 := CX[q4, q5];
	q6 := H[q6];
	q6, q7 := CX[q6, q7];
	q8 := H[q8];
	q8, q9 := CX[q8, q9];
	q10 := H[q10];
	q10, q11 := CX[q10, q11];
	q12 := H[q12];
	q12, q13 := CX[q12, q13];
	q0, q2 := CX[q0, q2];
	if M[q2] = 1 then q3 := X[q3]; else skip; fi;
	q4, q6 := CX[q4, q6];
	if M[q6] = 1 then q7 := X[q7]; else skip; fi;
	q3, q8 := CX[q3, q8];
	q7, q8 := CX[q7, q8];
	if M[q8] = 1 then q9 := X[q9]; else skip; fi;
	q9, q10 := CX[q9, q10];
	if M[q10] = 1 then q11 := X[q11]; else skip; fi;
	q9, q12 := CX[q9, q12];
	if M[q12] = 1 then q13 := X[q13]; else skip; fi;
	q13, q5 := CX[q13, q5];
	q11, q1 := CX[q11, q1];
	q11 := H[q11];
	if M[q11] = 1 then q9 := Z[q9]; else skip; fi;
	q13 := H[q13];
	if M[q13] = 1 then q9 := Z[q9]; else skip; fi;
	q9 := H[q9];
	if M[q9] = 1 then q3 := Z[q3]; q7 := Z[q7]; else skip; fi;
	q3 := H[q3];
	if M[q3] = 1 then q0 := Z[q0]; else skip; fi;
	q7 := H[q7];
	if M[q7] = 1 then q4 := Z[q4]; else skip; fi;
end

pcheck in NETWORK_CODING with 'P=? [F "target"]' --backend=Storm .

search in NETWORK_CODING with =>! such that P(q1, q4, |phi+>) and P(q0, q5, |phi+>) .

psearch in NETWORK_CODING with =>! such that P(q1, q4, |phi+>) and P(q0, q5, |phi+>) .